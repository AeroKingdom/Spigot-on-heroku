#!/usr/bin/env bash

mc_port=25566
port=${1:-${PORT:-8080}}

#if [ -z "$NGROK_API_TOKEN" ]; then
#  echo "You must set the NGROK_API_TOKEN config var to create a TCP tunnel!"
#  exit 1
#fi

# Start the TCP tunnel - remove - to run ngrok
#ngrok_cmd="bin/ngrok tcp -authtoken $NGROK_API_TOKEN -log stdout --log-level debug ${NGROK_OPTS} ${mc_port}"
#echo "Starting ngrok..."
#eval "$ngrok_cmd | tee ngrok.log &"
#ngrok_pid=$!

# Installing Dropbox sync
curl "https://raw.githubusercontent.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh" -o dropbox_uploader.sh
chmod +x dropbox_uploader.sh
# run command using ./dropbox_uploader.sh to add access token
# ./dropbox_uploader.sh upload will list all options
# add jobs in the scheduler to backup daily
# more info here https://github.com/andreafabrizi/Dropbox-Uploader


# Do an inline sync first, then start the background job
echo "Starting sync..."
bin/sync
eval "while true; do sleep ${AWS_SYNC_INTERVAL:-60}; bin/sync; done &"
sync_pid=$!

# accept eula
echo eula=true > eula.txt
# create server config - change anything if you want
echo "server-port=${mc_port}" >> /app/server.properties
echo "server-ip=localhost" >> /app/server.properties # add public ip to server
# disable online mode for cracked players
echo "online-mode=false" >> /app/server.properties
touch whitelist.json
touch banned-players.json
touch banned-ips.json
touch ops.json

limit=$(ulimit -u)
case $limit in
  512)   # 2X Dyno
  heap="768m"
  ;;
  32768) # PX Dyno
  heap="4g"
  ;;
  *)     # 1X Dyno
  heap="456m"
  ;;
esac

echo "Starting: spigot ...${mc_port}"
eval "screen -L -h 2048 -dmS minecraft java -Xmx${heap} -Xms${heap} -jar spigot.jar nogui"
main_pid=$!

sleep 30

echo "Using socat to listen port..."
eval "screen -L -h 2048 -dmS openport socat TCP-LISTEN:${mc_port},fork TCP:localhost:${mc_port}"
echo "Done open port, use ...curl ipinfo.io/ip... to check your ip"

# Flush the logfile every second, and ensure that the logfile exists
screen -X "logfile 1" && sleep 1


echo "Tailing log"
eval "tail -f screenlog.0 &"
tail_pid=$!

trap "kill $ngrok_pid $main_pid $sync_pid $tail_pid" SIGTERM
trap "kill -300 $ngrok_pid $main_pid $sync_pid $tail_pid; exit" SIGKILL

eval "ruby -rwebrick -e'WEBrick::HTTPServer.new(:BindAddress => \"0.0.0.0\", :Port => ${port}, :MimeTypes => {\"rhtml\" => \"text/html\"}, :DocumentRoot => Dir.pwd).start'"
